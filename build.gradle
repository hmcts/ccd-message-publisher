plugins {
  id 'application'
  id 'java'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.0.13.RELEASE'
  id 'org.springframework.boot' version '2.5.15'
  id 'com.github.ben-manes.versions' version '0.36.0'
  id 'org.sonarqube' version '4.3.0.3225'
  id 'uk.gov.hmcts.java' version '0.12.43'
  id 'com.github.spacialcircumstances.gradle-cucumber-reporting' version '0.1.23'
  //id 'org.owasp.dependencycheck' version '10.0.3'
  id 'org.owasp.dependencycheck' version '12.0.2'
}



ext['spring-framework.version'] = '5.3.27'
ext['spring-security.version'] = '5.8.15'
ext['log4j2.version'] = '2.17.1'
ext['jackson.version'] = '2.16.0'
ext['snakeyaml.version'] = '2.0'

configurations {
  providedRuntime
  annotationProcessor
  aatCompile.extendsFrom(testCompile)
  aatRuntime.extendsFrom(testRuntime)
  cucumberRuntime.extendsFrom(functionalRuntime)
}

application {
  mainClass = 'uk.gov.hmcts.ccd.MessagePublisherApplication'
}

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(21)
  }
}

sourceSets {
  aat {
    java {
      srcDir('src/aat/java')
      compileClasspath += main.output
      runtimeClasspath += main.output
    }
    resources {
      srcDir('src/aat/resources')
    }
  }

  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }

  smokeTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/smokeTest/java')
    }
    resources.srcDir file('src/smokeTest/resources')
  }
}

tasks.withType(Copy).configureEach {
  duplicatesStrategy 'exclude'
}

tasks.withType(Test) {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
  }
}

test {
  generateCucumberReports.enabled = false
  failFast = true
}

task functional(type: Test) {
  description = 'Executes functional tests against an the CCD Message Publisher API instance just deployed'
  dependsOn aatClasses
  copy {
    from "src/aat/resources/DummyTest.xml"
    into "${buildDir}/test-results/test"
  }

  doFirst {
    generateCucumberReports.enabled = true
    javaexec {
      main = "uk.gov.hmcts.ccd.messagepublisher.befta.MessagePublisherBeftaMain"
      classpath += configurations.cucumberRuntime + sourceSets.aat.runtimeClasspath + sourceSets.main.output + sourceSets.test.output
      args = [
        '--threads', '10',
        '--plugin', "json:${rootDir}/target/cucumber.json",
        '--tags', 'not @Ignore',
        '--glue', 'uk.gov.hmcts.befta.player',
        '--glue', 'uk.gov.hmcts.ccd.messagepublisher.befta', 'src/aat/resources/features'
      ]
      jvmArgs = ['--add-opens=java.base/java.lang.reflect=ALL-UNNAMED']
    }

  }

  finalizedBy {
    generateCucumberReports {
      doLast {
        delete "${rootDir}/BEFTA Report for Functional Tests/"
        new File("${rootDir}/BEFTA Report for Functional Tests").mkdirs()
        file("${rootDir}/target/cucumber/cucumber-html-reports").renameTo(file("${rootDir}/BEFTA Report for Functional Tests"))
        logger.quiet("Functional test report moved to ---> file://${rootDir}/BEFTA%20Report%20for%20Functional%20Tests/overview-features.html")
      }
    }
  }
  outputs.upToDateWhen { false }
}

task integration(type: Test) {
  description = "Runs integration tests"
  group = "Verification"
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  failFast = true
  shouldRunAfter test
}

task fortifyScan(type: JavaExec) {
  mainClass = "uk.gov.hmcts.fortifyclient.FortifyClientMainApp"
  classpath += sourceSets.test.runtimeClasspath
  jvmArgs = ['--add-opens=java.base/java.lang.reflect=ALL-UNNAMED']
}

task smoke(type: Test) {
  description = 'Executes smoke tests against an the CCD Data Store API instance just deployed'
  dependsOn aatClasses

  copy {
    from "src/aat/resources/DummyTest.xml"
    into "${buildDir}/test-results/test"
  }

  doLast {
    generateCucumberReports.enabled = true
    javaexec {
      main = "uk.gov.hmcts.ccd.messagepublisher.befta.MessagePublisherBeftaMain"
      classpath += configurations.cucumberRuntime + sourceSets.aat.runtimeClasspath
      args = ['--plugin', "json:${rootDir}/target/cucumber.json", '--tags', '@Smoke and not @Ignore', '--glue',
              'uk.gov.hmcts.befta.player', '--glue', "uk.gov.hmcts.ccd.messagepublisher.befta", 'src/aat/resources/features']
      jvmArgs = ['--add-opens=java.base/java.lang.reflect=ALL-UNNAMED']
    }
  }

  finalizedBy {
    generateCucumberReports {
      doLast {
        delete "${rootDir}/BEFTA Report for Smoke Tests/"
        new File("${rootDir}/BEFTA Report for Smoke Tests").mkdirs()
        file("${rootDir}/target/cucumber/cucumber-html-reports").renameTo(file("${rootDir}/BEFTA Report for Smoke Tests"))
        logger.quiet("Smoke test report moved to ---> file://${rootDir}/BEFTA%20Report%20for%20Smoke%20Tests/overview-features.html")
      }
    }
  }

  outputs.upToDateWhen { false }
}

check.dependsOn integration

jacocoTestReport {
  executionData(test, integration)
  reports {
    xml.required = true
    csv.required = false
    xml.outputLocation = file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
  }
}

project.tasks['sonarqube'].dependsOn jacocoTestReport

sonarqube {
  properties {
    property "sonar.projectName", "Reform :: ccd-message-publisher"
    property "sonar.projectKey", "uk.gov.hmcts.reform:ccd-message-publisher"
    property "sonar.coverage.jacoco.xmlReportPaths", "${jacocoTestReport.reports.xml.outputLocation.get().asFile.path}"
  }
}

configurations.all {
  exclude group:"io.netty", module: "netty-transport-classes-epoll"
  exclude group:"io.netty", module:"netty-transport-classes-kqueue"
}

// before committing a change, make sure task still works
dependencyUpdates {
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
  }
  rejectVersionIf { selection -> // <---- notice how the closure argument is named
    return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
apply from: './gradle/suppress.gradle'
dependencyCheck {
  suppressionFile = 'config/owasp/suppressions.xml'
}

dependencyManagement {
  imports {
    mavenBom "org.springframework.cloud:spring-cloud-dependencies:2020.0.5"
  }
  dependencies {
    dependency group: 'org.bouncycastle', name: 'bcpkix-jdk15to18', version: '1.77'
    // CVE-2018-10237 - Unbounded memory allocation
    dependencySet(group: 'com.google.guava', version: '32.1.2-jre') {
      entry 'guava'
    }
  }
}

cucumberReports {
  outputDir = file("${projectDir}/target/cucumber")
  reports = files("${projectDir}/target/cucumber.json")
  notFailingStatuses = ["skipped", "passed"]
}

repositories {
  mavenLocal()
  mavenCentral()
  maven {
    url "https://jitpack.io"
  }
}

def versions = [
  junit              : '5.7.0',
  junitPlatform      : '1.7.0',
  reformLogging      : '6.0.1',
  appInsightsVersion : '2.4.1',
  lombok             : '1.18.34',
  junitVintageVersion: '5.7.0',
  springBoot         : springBoot.class.package.implementationVersion,
  springfoxSwagger   : '3.0.0',
  testcontainers     : '1.20.2',
  netty              : '4.1.107.Final',
  tomcatVersion      : '9.0.91'
]

ext.libraries = [
  junit5: [
    "org.junit.jupiter:junit-jupiter-api:${versions.junit}",
    "org.junit.jupiter:junit-jupiter-engine:${versions.junit}",
    "org.junit.jupiter:junit-jupiter-params:${versions.junit}",
    "org.junit.platform:junit-platform-commons:${versions.junitPlatform}",
    "org.junit.platform:junit-platform-engine:${versions.junitPlatform}",
    "org.junit.vintage:junit-vintage-engine:${versions.junitVintageVersion}"
  ]
]

dependencies {

  implementation('org.springframework.cloud:spring-cloud-starter-bootstrap'){
    version {
      strictly '3.1.8'
    }
  }

  implementation('org.springframework.cloud:spring-cloud-starter'){
    version {
      strictly '3.1.7'
    }
  }

  implementation('org.springframework.boot:spring-boot-starter'){
    version {
      strictly '2.6.15'
    }
  }

  implementation('org.bouncycastle:bcpkix-jdk18on') {
    version {
      strictly '1.77'
    }
  }

  implementation('org.springframework.security:spring-security-rsa'){
    version {
      strictly '1.1.0'
    }
  }

  implementation('org.bouncycastle:bcprov-jdk18on') {
    version {
      strictly '1.77'
    }
  }
  implementation('org.json:json') {
    version {
      strictly '20240303'
    }
  }

  //implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-bootstrap', version: '3.1.7'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-activemq'

  implementation(group: 'com.microsoft.azure', name: 'azure-servicebus-jms-spring-boot-starter', version: '2.3.5') {
    exclude group: 'org.simpleframework', module: 'simple-xml' //CVE-2017-1000190
    exclude group: 'org.nanohttpd', module: 'nanohttpd' //CVE-2020-13697
    exclude group: 'com.azure', module: 'azure_cli'
    exclude group: 'com.azure', module: 'azure_service_connector'
  }

  implementation group: 'io.netty', name: 'netty-buffer', version: versions.netty
  implementation group: 'io.netty', name: 'netty-codec', version: versions.netty
  implementation group: 'io.netty', name: 'netty-codec-http', version: versions.netty
  implementation group: 'io.netty', name: 'netty-common', version: versions.netty
  implementation group: 'io.netty', name: 'netty-handler', version: versions.netty
  implementation group: 'io.netty', name: 'netty-resolver', version: versions.netty
  implementation group: 'io.netty', name: 'netty-transport', version: versions.netty
  implementation group: 'io.netty', name: 'netty-transport-native-epoll', version: versions.netty
  implementation group: 'io.netty', name: 'netty-transport-native-kqueue', version: versions.netty
  implementation group: 'io.netty', name: 'netty-transport-native-unix-common', version: versions.netty

  implementation group: 'org.glassfish', name: 'jakarta.el', version: '4.0.1' // CVE-2021-28170
  // CVE-2021-42550
  implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.13'
  implementation group: 'ch.qos.logback', name: 'logback-core', version: '1.2.13'

  implementation(group: 'io.hawt', name: 'hawtio-springboot', version: '2.12.0') {
    exclude(group: 'org.json', module: 'json')
  }

  implementation group: 'io.springfox', name: 'springfox-swagger2', version: versions.springfoxSwagger

  implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: versions.reformLogging
  implementation group: 'com.microsoft.azure', name: 'applicationinsights-logging-logback', version: versions.appInsightsVersion
  implementation group: 'com.microsoft.azure', name: 'applicationinsights-spring-boot-starter', version: versions.appInsightsVersion

  implementation group: 'com.vladmihalcea', name: 'hibernate-types-52', version: '2.10.0'

  implementation group: 'org.projectlombok', name: 'lombok', version: versions.lombok
  annotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok

  implementation group: 'org.hibernate', name: 'hibernate-core', version: '5.4.25.Final' // For CVE-2020-25638
  implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.13' // For CVE-2020-13956

  implementation group: 'org.apache.activemq', name: 'activemq-client', version: '5.16.7' // For CVE-2021-26117
  implementation group: 'org.apache.activemq', name: 'activemq-broker', version: '5.16.7' // For CVE-2021-26117
  implementation group: 'net.minidev', name: 'json-smart', version: '2.4.9'
  implementation group: 'com.nimbusds', name: 'nimbus-jose-jwt', version: '9.37.2'
  implementation group: 'commons-io', name: 'commons-io', version: '2.14.0'
  implementation group: 'commons-fileupload', name: 'commons-fileupload', version: '1.5'

  implementation group: 'org.apache.tomcat.embed', name: 'tomcat-embed-core', version: versions.tomcatVersion
  implementation group: 'org.apache.tomcat.embed', name: 'tomcat-embed-websocket', version: versions.tomcatVersion
  implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.16.0'

  runtimeOnly group: 'org.postgresql', name: 'postgresql', version: '42.5.5'
  runtimeOnly group: 'com.zaxxer', name: 'HikariCP', version: '4.0.2'

  aatImplementation group: 'com.github.hmcts', name: 'ccd-test-definitions', version: '7.24.2', {
    exclude group: 'com.sun.xml.bind', module: 'jaxb-osgi'
  }
  aatImplementation group: 'com.github.hmcts', name: 'befta-fw', version: '9.2.0', {
    exclude group: 'com.sun.xml.bind', module: 'jaxb-osgi'
  }
  aatImplementation group: 'org.apache.poi', name: 'poi-ooxml-schemas', version: '4.1.2' //For CVE-2019-12415
  aatImplementation group: 'commons-lang', name: 'commons-lang', version: '2.6'
  aatImplementation libraries.junit5

  testImplementation libraries.junit5
  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', {
    exclude group: 'junit', module: 'junit'
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
  }

  testAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok

  integrationTestImplementation sourceSets.main.runtimeClasspath
  integrationTestImplementation sourceSets.test.runtimeClasspath
  integrationTestImplementation group: 'org.testcontainers', name: 'testcontainers', version: versions.testcontainers
  integrationTestImplementation group: 'org.testcontainers', name: 'junit-jupiter', version: versions.testcontainers
  integrationTestImplementation group: 'org.testcontainers', name: 'postgresql', version: versions.testcontainers

  smokeTestImplementation sourceSets.main.runtimeClasspath
  testImplementation 'com.github.hmcts:fortify-client:1.4.3:all'
}

bootJar {
  archiveBaseName = 'ccd-message-publisher'
  manifest {

    attributes 'Implementation-Title': project.name,
      'Implementation-Version': project.version
  }
}

wrapper {
  distributionType = Wrapper.DistributionType.ALL
}
